input { 
			stdin { } 
}
filter {


        # UI INPUT: 
        #    1. mark_name:  variable to save mark. eg: logger
        #    2. START pattern: used to match START mark.
        #    3. END   pattern: used to match END mark.
        #    4. result_name: used to save result.


        INFO - 12345 - TASK_START - start
        id 1
        id 2
        INFO - 12345 - TASK_END - start

INFO - 12345 - TASK_START - start
INFO - 12345 - SQL - sqlQuery1 - 12
INFO - 12345 - SQL - sqlQuery2 - 34
INFO - 12345 - TASK_END - end



        grok {
            match => [ 
                      "message", "%{LOGLEVEL:loglevel} - %{NOTSPACE} - %{NOTSPACE:logger} - %{WORD:label}( - %{INT:duration:int})?",   # pattern: user supplied.

                       #"message", "%{'MY MARK START':logger}", # MARK name mark value : start
                       #"message", "%{'MY MARK END':logger}",   # MARK name mark value : end

                       "message", "%{GREEDYDATA:logger}"      #  MARK value (internal): not match. 
                     ]
            add_field => {"myid" => "collect_user"}           #  task id(interval).
            
        }
  
        if [logger] == "TASK_START" {
            aggregate {
                task_id => "%{myid}"
                code => "#map['sql_duration'] = 0
                         map['another'] = [] "   # RESULT: name value.
                map_action => "create"
            }

        } else if [logger] == "TASK_END" {
            aggregate {
                task_id => "%{myid}"
                code => "#event['sql_duration'] = map['sql_duration']
                         event['another'] = map['another']"
                map_action => "update"
                end_of_task => true
                timeout => 120
            }
        } else {
            aggregate {
                task_id => "%{myid}"
                code => "#map['sql_duration'] += event['duration']
                         map['another'] << event['message']  "
                map_action => "update"
            }
        }




}

output {
			 stdout { codec => rubydebug }
}


INFO - 12345 - TASK_START - startINFO - 12345 - SQL - sqlQuery1 - 12INFO - 12345 - SQL - sqlQuery2 - 34INFO - 12345 - TASK_END - end

INFO - 12345 - TASK_START - startINFO - 12345 - SQL - sqlQuery1 - 12INFO - 12345 - TASK_END - end